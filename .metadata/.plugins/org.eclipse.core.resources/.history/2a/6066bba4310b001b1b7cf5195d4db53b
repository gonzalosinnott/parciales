/*
 ============================================================================
 Name        : cliente.c
 Author      : Gonzalo Sinnott Segura
 Version     :
 Copyright   :
 Description : Library cliente.c
 ============================================================================
 */

#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include "utn.h"
#include "cliente.h"

static int cliente_generateNewId(void);
static int cliente_checkFirstEmptyIndex(Cliente* cliente_list, int cliente_len, int *emptyIndex);
int cliente_getForm(char *cliente_name, char *cliente_lastName, char *cliente_cuit);
static int cliente_addData(Cliente* cliente_list,int cliente_len,int cliente_id,char cliente_name[], char cliente_lastName[], char cliente_cuit[]);


/**
 * \brief initCliente: To indicate that all positions in the array are empty,
 * \this function put the flag (cliente_isEmpty) in TRUE in all position of the array
 * \param sEmployee* cliente_list: Pointer to array of employees
 * \param int cliente_len: Array length
 * \return (-1) Error / (0) Ok
 */

int cliente_initArray(Cliente* cliente_list, int cliente_len)
{
	int retorno = -1;
	if(cliente_list != NULL && cliente_len > 0)
	{
		for(int i=0;i<cliente_len;i++)
		{
			cliente_list[i].cliente_isEmpty = TRUE;
		}
		retorno = 0;
	}
	return retorno;
}

/**
 * \brief cliente_alta: Asks the user for the student data
 * \param Cliente* cliente_list: Pointer to array of employees
 * \param int cliente_len: Array length
 * \param int cliente_firstLoad: Pointer to space in memory where is the
 * \variable to indicate if an entry is loaded
 * \return (-1) Error / (0) Ok
 */

int cliente_alta(Cliente* cliente_list,int cliente_len, int *cliente_firstLoad)
{
	int retorno = -1;
	int cliente_id;
	char cliente_name[LONG_NAME];
	char cliente_lastName[LONG_NAME];
	char cliente_cuit[LONG_CUIT];
	int index;

	if(cliente_list != NULL && cliente_len > 0 && cliente_firstLoad >0 && cliente_checkFirstEmptyIndex(cliente_list, cliente_len, &index)==0)
	{
		if(cliente_getForm(cliente_name, cliente_lastName, cliente_cuit)== 0)
		{
			cliente_id=cliente_generateNewId();
			if(cliente_addData(cliente_list, cliente_len, cliente_id, cliente_name, cliente_lastName, cliente_cuit)==0)
			{
				*cliente_firstLoad = TRUE;
				retorno=0;
			}
		}
		else
		{
			printf("\nERROR EN LA CARGA DEL EMPLEADO.\n");
		}
	}
	else
	{
		printf("\nNO SE PUEDEN CARGAR MAS REGISTROS.\n");
	}
	return retorno;
}

/**
 * \brief cliente_checkFirstEmptyIndex: Checks first empty index in the array
 * \this function search the array for the first index with the value TRUE in the cliente_isEmpty item
 * \param sEmployee* cliente_list: Pointer to array of employees
 * \param int cliente_len: Array length
 * \param int *EmptyIndex: Pointer to position of first empty index.
 * \return (-1) Error / (0) Ok
 */

static int cliente_checkFirstEmptyIndex(Cliente* cliente_list, int cliente_len, int *emptyIndex)
{
	int retorno = -1;
	if(cliente_list != NULL && cliente_len >0 && emptyIndex != NULL)
	{
		for(int i = 0; i < cliente_len; i++)
		{
			if(cliente_list[i].cliente_isEmpty == TRUE)
			{
				*emptyIndex = i;
				retorno = 0;
				break;
			}
		}
	}
	return retorno;
}

/**
 * \brief cliente_getForm: Brings up a menu for the user to complete with info
 * \param char *cliente_name: Pointer to place to store cliente_name
 * \param char *lastName: Pointer to place to store last cliente_name
 * \param float *salary: Pointer to place to store salary
 * \param int *sector: Pointer to place to store sector
 * \return (-1) Error / (0) Ok
 */

int cliente_getForm(char *cliente_name, char *cliente_lastName, char *cliente_cuit)
{
	int retorno = -1;

	if(cliente_name != NULL && cliente_lastName != NULL && cliente_cuit != NULL )
	{
		if((utn_getString("Ingrese Apellido:", "Error. ", cliente_lastName, 3, LONG_NAME)==0) &&
		   (utn_getString("Ingrese Nombre:", "Error. ", cliente_name, 3, LONG_NAME)==0) &&
		   (utn_getAlphaNum("Ingrese CUIT(SIN GUIONES):", "Error. ", cliente_cuit, 3, LONG_CUIT)==0))
		{
			retorno = 0;
		}
	}
	return retorno;
}

/**
 *  \brief generateNewId: Generates a new ID that's +1 from previous loaded employee ID.
 */

static int cliente_generateNewId(void)
{
	static int id;

	id = id+1;
	return id;
}

/**
 *  \brief cliente_addData: add in a existing cliente_list of employees the values received
 *  as parameters in the first empty position.
 * \param Employee* cliente_list: Pointer to array of employees
 * \param int cliente_len: Array length
 * \param int id: id generated by generateNewId() function
 * \param char cliente_name[]: Input by user from getEmployeeForm
 * \param char lastName[]: Input by user from getEmployeeForm
 * \param float salary: Input by user from getEmployeeForm
 * \param int sector: Input by user from getEmployeeForm
 * \return (-1) Error / (0) Ok
 */

static int cliente_addData(Cliente* cliente_list,int cliente_len,int cliente_id,char cliente_name[], char cliente_lastName[], char cliente_cuit[])
{
	int retorno = -1;
	int emptyIndex;

	if(cliente_checkFirstEmptyIndex(cliente_list, cliente_len, &emptyIndex)==0)
	{
		cliente_list[emptyIndex].cliente_id=cliente_id;
		cliente_list[emptyIndex].cliente_isEmpty=FALSE;
		strcpy(cliente_list[emptyIndex].cliente_name,cliente_name);
		strcpy(cliente_list[emptyIndex].cliente_lastName,cliente_lastName);
		strcpy(cliente_list[emptyIndex].cliente_cuit,cliente_cuit);
		printf("\nEl ID para la cliente %s %s es: %d\n",
				cliente_list[emptyIndex].cliente_lastName,
				cliente_list[emptyIndex].cliente_name,
				cliente_list[emptyIndex].cliente_id);
		retorno=0;
	}
    return retorno;
}

/**
 * \brief cliente_print: print the content of employees array
 * \param Employee* cliente_list: Pointer to array of employees
 * \param int cliente_len: Array length
 * \return (-1) Error / (0) Ok*
 */

int cliente_print(Cliente* cliente_list, int cliente_len)
{
	int retorno = -1;
	if(cliente_list != NULL && cliente_len > 0)
	{
		printf("\n| APELLIDO       | Nombre         | CUIT           | ID\n");
		printf("---------------------------------------------------------\n");
		for(int i=0;i< cliente_len ;i++)
		{
			if(cliente_list[i].cliente_isEmpty == FALSE)
			{
				printf("| %-16s| %-16s| %-16s| %d\n",
						cliente_list[i].cliente_lastName,
						cliente_list[i].cliente_name,
						cliente_list[i].cliente_cuit,
						cliente_list[i].cliente_id);
				printf("---------------------------------------------------------\n");
			}
		}
		retorno = 0;
	}
	return retorno;
}
