/*
 ============================================================================
 Name        : publication.c
 Author      : Gonzalo Sinnott Segura
 Version     :
 Copyright   :
 Description : Library publication.c
 ============================================================================
 */

#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include "utn.h"
#include "publication.h"

static int publication_generateNewId(void);
static int publication_checkFirstEmptyIndex(Publication* publication_list, int publication_len, int *emptyIndex);
static int publication_getForm(int *publication_category, char *publication_description);
static int publication_addData(Publication* publication_list,int publication_len,int publication_id,int publication_category, char publication_description[], int publication_idCliente);
static int publication_formatCategory(int publication_category,char* formatedCategory);
static int publication_countMaxCategory(int countInmobiliario,int countAutomotor,int countEmpleos,int countCompraVenta);

/**
 * \brief publication_addHardcode: Adds Hardcoded data for testing purposes
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int publication_firstLoad: Pointer to space in memory where is the variable to indicate if publications array is empty
 * \return (-1) Error / (0) Ok
 */

int publication_addHardcode(Publication* publication_list, int publication_len, int *publication_firstLoad)
{
	int retorno = -1;
	if(publication_list != NULL && publication_len >0)
	{
		int publication_id[]={50,60,70,80,1000};
		int publication_category[]={3,2,2,1,4};
		char publication_description[][LEN_DESCRIPTION]={"Se vende casa en la costa,excelente ubicacion. Llamar a 3256890",
									 	 				  "Venta Ford Ka. 30.000 KM. Tel: 3245546",
														  "Compro auto para Taxi. Interesados comunicarse al 467654.",
														  "Se busca bachero para turno noche. Tel: 423396.",
														  "Vendo Mesa de pool. Poco uso. Msj a pool@gmail.com."};
		int publication_idCliente[]={100, 60, 60, 50, 70};
		for(int i = 0; i < 5; i++)
		{
			publication_addData(publication_list, publication_len, publication_id[i], publication_category[i], publication_description[i], publication_idCliente[i]);
		}
		*publication_firstLoad = TRUE;
	}
	return retorno;
}

/**
 * \brief publication_initArray: To indicate that all positions in the array are empty,
 * \this function puts the flag (publication_isEmpty) in TRUE in all position of the array
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \return (-1) Error / (0) Ok
 */

int publication_initArray(Publication* publication_list, int publication_len)
{
	int retorno = -1;
	if(publication_list != NULL && publication_len > 0)
	{
		for(int i=0;i<publication_len;i++)
		{
			publication_list[i].publication_isEmpty = TRUE;
		}
		retorno = 0;
	}
	return retorno;
}

/**
 * \brief publication_add: Asks the user for the publication data
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int publication_firstLoad: Pointer to space in memory where is the variable to indicate if publications array is empty
 * \variable to indicate if an entry is loaded
 * \return (-1) Error / (0) Ok
 */

int publication_add(Publication* publication_list,int publication_len, int *publication_firstLoad, int clientId)
{
	int retorno = -1;
	int publication_id;
	int publication_category;
	char publication_description[LEN_DESCRIPTION];
	int publication_idCliente;
	int index;

	publication_idCliente = clientId;

	if(publication_list != NULL && publication_len > 0 &&
	   publication_checkFirstEmptyIndex(publication_list, publication_len, &index)==0)
	{
		if(publication_getForm(&publication_category, publication_description)== 0)
		{
			publication_id=publication_generateNewId();
			if(publication_addData(publication_list, publication_len, publication_id, publication_category, publication_description, publication_idCliente)==0)
			{
				publication_printById(publication_list, publication_len, publication_id);
				*publication_firstLoad = TRUE;
				retorno=0;
			}
		}
		else
		{
			printf("\nERROR EN LA CARGA DE PUBLICIDAD.\n");
		}
	}
	else
	{
		printf("\nNO SE PUEDEN CARGAR MAS PUBLICIDADES.\n");
	}
	return retorno;
}

/**
 * \brief publication_checkFirstEmptyIndex: Checks first empty index in the array
 * \this function search the array for the first index with the value TRUE in the publication_isEmpty item
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int *EmptyIndex: Pointer to position of first empty index.
 * \return (-1) Error / (0) Ok
 */

static int publication_checkFirstEmptyIndex(Publication* publication_list, int publication_len, int *emptyIndex)
{
	int retorno = -1;
	if(publication_list != NULL && publication_len >0 && emptyIndex != NULL)
	{
		for(int i = 0; i < publication_len; i++)
		{
			if(publication_list[i].publication_isEmpty == TRUE)
			{
				*emptyIndex = i;
				retorno = 0;
				break;
			}
		}
	}
	return retorno;
}

/**
 * \brief publication_getForm: Brings up a menu for the user to complete with info
 * \param int *publication_category: Pointer to place to store publication_category
 * \param char *publication_description: Pointer to place to store publication_description
 * \return (-1) Error / (0) Ok
 */

static int publication_getForm(int *publication_category, char *publication_description)
{
	int retorno = -1;

	if(publication_category != NULL && publication_description != NULL)
	{
		if((utn_getIntNumber("Ingrese numero de rubro:"
							 "\n 1-EMPLEOS"
							 "\n 2-AUTOMOTOR"
							 "\n 3-INMOBILIARIOS"
							 "\n 4-COMPRA/VENTA"
							 "\nOpcion: ",
							 "Error, ", publication_category, 3, 4, 1)==0) &&
		   (utn_getAlphaNum("Ingrese DescripciÃ³n:", "Error. ", publication_description, 3, LEN_DESCRIPTION)==0))
		{
			retorno = 0;
		}
	}
	return retorno;
}

/**
 *  \brief publication_generateNewId: Generates a new ID that's +1 from previous loaded ID.
 */

static int publication_generateNewId(void)
{
	static int id;

	id = id+1;
	return id;
}

/**
 * \brief publication_addData: add in a existing list of publications the values received as parameters in the first empty position.
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int publication_id: id generated by publication_generateNewId() function
 * \param int *publication_category: Input by user from getEmployeeForm
 * \param char *publication_description: Input by user from getEmployeeForm
 * \param int publication_idClient: ID given by user from by user from newspaper_addPublicationMenu()
 * \return (-1) Error / (0) Ok
 */

static int publication_addData(Publication* publication_list,int publication_len,int publication_id,int publication_category, char *publication_description, int publication_idClient)
{
	int retorno = -1;
	int emptyIndex;
	char formatedCategory[LEN_CATEGORY];

	if(publication_list != NULL && publication_len > 0 &&
       publication_id > 0 && publication_category > 0 &&
	   publication_description != NULL && publication_idClient > 0)
	{
		publication_formatCategory(publication_category, formatedCategory);
		if(publication_checkFirstEmptyIndex(publication_list, publication_len, &emptyIndex)==0)
		{
			publication_list[emptyIndex].publication_id=publication_id;
			publication_list[emptyIndex].publication_isEmpty=FALSE;
			strncpy(publication_list[emptyIndex].publication_category,formatedCategory,LEN_CATEGORY);
			strncpy(publication_list[emptyIndex].publication_description,publication_description,LEN_DESCRIPTION);
			publication_list[emptyIndex].publication_idClient=publication_idClient;
			strncpy(publication_list[emptyIndex].publication_status,ACTIVE,LEN_STATUS);
			retorno=0;
		}
	}
    return retorno;
}

/**
 * \brief publication_formatCategory: Converts the data given by publication_category to string form
 * \param int publication_category: Input by user from getEmployeeForm
 * \param char *formatedCategory: Pointer to space in memory where formated value will be stored.
 * \return (-1) Error / (0) Ok
 */

static int publication_formatCategory(int publication_category,char* formatedCategory)
{
	int retorno = -1;

	if(publication_category > 0 && formatedCategory != NULL)
	{
		switch(publication_category)
		{
			case 1:
				strncpy(formatedCategory,"EMPLEOS",LEN_CATEGORY);
				break;
			case 2:
				strncpy(formatedCategory,"AUTOMOTOR",LEN_CATEGORY);
				break;
			case 3:
				strncpy(formatedCategory,"INMOBILIARIOS",LEN_CATEGORY);
				break;
			case 4:
				strncpy(formatedCategory,"COMPRA/VENTA",LEN_CATEGORY);
				break;
		}
		retorno = 0;
	}
	return retorno;
}


/**
 * \brief publication_findIndexById: find an publication by Id then returns the index position in array.
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int id: id to search
 * \return Return employee index position or (-1) if ERROR
 */

int publication_findIndexById(Publication* publication_list, int publication_len,int id)
{
	int retorno;

	if (publication_list != NULL && publication_len > 0 && id > 0)
	{
		for (int i = 0; i < publication_len; i++)
		{
			if(publication_list[i].publication_isEmpty == FALSE && publication_list[i].publication_id == id )
			{
				retorno = i;
				break;
			}
		}
	}
	return retorno;;
}


/**
 * \brief publication_findById: find a publication by Id and returns 0 if ID is found
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int id: id to search
 * \param int* clientId: Pointer to place to store client ID associated to publication ID
 * \return Return 0 if ID exists or (-1) if ERROR
 */

int publication_findById(Publication* publication_list, int publication_len,int id, int* clientId)
{
	int retorno = -1;

	if (publication_list != NULL && publication_len > 0 && id > 0)
	{
		for (int i = 0; i < publication_len; i++)
		{
			if(publication_list[i].publication_isEmpty == FALSE && publication_list[i].publication_id == id )
			{
				*clientId = publication_list[i].publication_idClient;
				retorno = 0;
				break;
			}
		}
	}
	return retorno;;
}

/**
 * \brief publication_findByClienteId: find a publication by Client Id and returns 0 if ID is found
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int id: id to search
 * \return Return 0 if ID exists or (-1) if ERROR
 */

static int publication_findByClienteId(Publication* publication_list, int publication_len,int id)
{
	int retorno = -1;

	if (publication_list != NULL && publication_len > 0 && id > 0)
	{
		for (int i = 0; i < publication_len; i++)
		{
			if(publication_list[i].publication_isEmpty == FALSE && publication_list[i].publication_idClient == id )
			{
				retorno = 0;
				break;
			}
		}
	}
	return retorno;;
}


/**
 * \brief publication_removebyClientId: Remove a publication associated by given client ID (put publication_isEmpty Flag in TRUE)
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int id: id value of Client
 * \return (-1) Error / (0) Ok
 */

int publication_removebyClientId(Publication* publication_list, int publication_len,int idClient)
{
	int retorno = -1;
	if (publication_list != NULL && publication_len > 0 && idClient > 0)
	{
		for(int i=0;i< publication_len ;i++)
		{
			if(publication_list[i].publication_isEmpty == FALSE && publication_list[i].publication_idClient == idClient)
			{
				publication_list[i].publication_isEmpty = TRUE;
			}
		}
		retorno = 0;
	}
	return retorno;
}

/**
 * \brief publication_pause: Pauses a publication(put publication_status Flag in PAUSED)
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int id: id value of publication to pause
 *  safeguard to prevent errors if all data is erased
 * \return (-1) Error / (0) Ok
 */

int publication_pause(Publication* publication_list, int publication_len,int id)
{
	int retorno = -1;
	int indexToModify;
	int answer;

	if (publication_list != NULL && publication_len > 0 && id > 0)
	{
		indexToModify = publication_findIndexById(publication_list, publication_len, id);
		if(publication_list != NULL && publication_len>0 && id > 0 && indexToModify > -1)
		{
			utn_getIntNumber("\nÂ¿Desea pausar esta publicidad?(1-SI/2-NO):", "Error. ", &answer, 3, 2, 1);
			switch(answer)
			{
				case 1:
					strncpy(publication_list[indexToModify].publication_status,PAUSED,LEN_STATUS);
					printf("\nREGISTRO DE PUBLICIDAD PAUSADO CON EXITO.\n");
					break;
				case 2:
					printf("\nREGISTRO NO PAUSADO\n");
					break;
				default:
					printf("\nERROR, INGRESE 1 PARA PAUSAR LA PUBLICIDAD.\n");
			}
			retorno = 0;
		}
	}
	return retorno;
}

/**
 * \brief publication_active: Activates a previously paused publication(put publication_status Flag in ACTIVE)
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int id: id value of publication to pause
 *  safeguard to prevent errors if all data is erased
 * \return (-1) Error / (0) Ok
 */

int publication_active(Publication* publication_list, int publication_len,int id)
{
	int retorno = -1;
	int indexToModify;
	int answer;

	if (publication_list != NULL && publication_len > 0 && id > 0)
	{
		indexToModify = publication_findIndexById(publication_list, publication_len, id);
		if(publication_list != NULL && publication_len>0 && id > 0 && indexToModify > -1)
		{
			utn_getIntNumber("\nÂ¿Desea reanudar esta publicidad?(1-SI/2-NO):", "Error. ", &answer, 3, 2, 1);
			switch(answer)
			{
				case 1:
					strncpy(publication_list[indexToModify].publication_status,ACTIVE,LEN_STATUS);
					printf("\nREGISTRO DE PUBLICIDAD REANUDADO CON EXITO.\n");
					break;
				case 2:
					printf("\nREGISTRO NO REANUDADO\n");
					break;
				default:
					printf("\nERROR, INGRESE 1 PARA REANUDAR EL REGISTRO.\n");
			}
			retorno = 0;
		}
	}
	return retorno;
}


/**
 * \brief publication_printAll: prints the content of publications array
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int publication_firstLoad: Pointer to space in memory where is the variable to indicate if publications array is empty
 * \return (-1) Error / (0) Ok*
 */

int publication_printAll(Publication* publication_list, int publication_len, int publication_firstLoad)
{
	int retorno = -1;

	if(publication_list != NULL && publication_len >0)
	{
		if(publication_firstLoad == FALSE)
		{
			printf("\nERROR. NO HAY DATOS INGRESADOS.\n");
		}
		else
		{
			if(publication_list != NULL && publication_len > 0)
			{
				printf("-----------------------------------------------------------------------------------------------------------------\n");
				printf("|                                          LISTADO DE PUBLICACIONES                                             |\n");
				printf("-----------------------------------------------------------------------------------------------------------------\n");
				printf("| ID CLIENTE |   CATEGORIA   | DESCRIPCION                                                      | ESTADO |  ID  |\n");
				printf("-----------------------------------------------------------------------------------------------------------------\n");
				for(int i=0;i< publication_len ;i++)
				{
					if(publication_list[i].publication_isEmpty == FALSE)
					{
						printf("| %-11d| %-14s| %-65s| %-7s| %-5d|\n",
								publication_list[i].publication_idClient,
								publication_list[i].publication_category,
								publication_list[i].publication_description,
								publication_list[i].publication_status,
								publication_list[i].publication_id);
						printf("-----------------------------------------------------------------------------------------------------------------\n");
					}
				}
				retorno = 0;
			}
		}
	}
	return retorno;
}

/**
 * \brief publication_printActive: prints only the active publications
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \return (-1) Error / (0) Ok*
 */

int publication_printActive(Publication* publication_list, int publication_len)
{
	int retorno = -1;


	if(publication_list != NULL && publication_len > 0)
	{
		printf("----------------------------------------------------------------------------------------------------------\n");
		printf("|                                  LISTADO DE PUBLICACIONES ACTIVAS                                      |\n");
		printf("----------------------------------------------------------------------------------------------------------\n");
		printf("|  ID  |   CATEGORIA   | DESCRIPCION                                                      |  ID CLIENTE  |\n");
		printf("----------------------------------------------------------------------------------------------------------\n");
		for(int i=0;i< publication_len ;i++)
		{
			if(publication_list[i].publication_isEmpty == FALSE && strcmp(publication_list[i].publication_status,ACTIVE)==0)
			{
				printf("| %-5d| %-14s| %-65s| %-13d|\n",
						publication_list[i].publication_id,
						publication_list[i].publication_category,
						publication_list[i].publication_description,
						publication_list[i].publication_idClient);
				printf("----------------------------------------------------------------------------------------------------------\n");
				retorno = 0;
			}
		}
	}
	return retorno;
}

/**
 * \brief publication_printPaused: prints only the paused publications
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \return (-1) Error / (0) Ok*
 */

int publication_printPaused(Publication* publication_list, int publication_len)
{
	int retorno = -1;


	if(publication_list != NULL && publication_len > 0)
	{
		printf("----------------------------------------------------------------------------------------------------------\n");
		printf("|                                 LISTADO DE PUBLICACIONES PAUSADAS                                      |\n");
		printf("----------------------------------------------------------------------------------------------------------\n");
		printf("|  ID  |   CATEGORIA   | DESCRIPCION                                                      |  ID CLIENTE  |\n");
		printf("----------------------------------------------------------------------------------------------------------\n");
		for(int i=0;i< publication_len ;i++)
		{
			if(publication_list[i].publication_isEmpty == FALSE && strcmp(publication_list[i].publication_status,PAUSED)==0)
			{
				printf("| %-5d| %-14s| %-65s| %-13d|\n",
						publication_list[i].publication_id,
						publication_list[i].publication_category,
						publication_list[i].publication_description,
						publication_list[i].publication_idClient);
				printf("----------------------------------------------------------------------------------------------------------\n");
				retorno = 0;
			}
		}
	}

	return retorno;
}


/**
 * \brief publication_printByClienteId: print the content of a given publication by client ID
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int publication_firstLoad: Pointer to space in memory where is the variable to indicate if publications array is empty
 * \param int idCliente: Value to search and print asociated info
 * \return (-1) Error / (0) Ok*
 */

int publication_printByClientId(Publication* publication_list, int publication_len,int clientId)
{
	int retorno = -1;

	if (publication_list != NULL && publication_len > 0 && clientId > 0)
	{
		if(publication_findByClienteId(publication_list, publication_len, clientId) != 0)
		{
			printf("\nNO POSEE PUBLICACIONES INGRESADAS.\n");
		}
		else
		{
			if(publication_list != NULL && publication_len > 0)
			{
				printf("------------------------------------------------------------------------------------------------------\n");
				printf("| PUBLICACIONES DEL CLIENTE ID : %-4d                                                                |\n",clientId);
				printf("------------------------------------------------------------------------------------------------------\n");
				printf("|   CATEGORIA   | ID   | DESCRIPCION                                                      |  ESTADO  |\n");
				printf("------------------------------------------------------------------------------------------------------\n");
				for(int i=0;i< publication_len ;i++)
				{
					if(publication_list[i].publication_isEmpty == FALSE && publication_list[i].publication_idClient == clientId)
					{
						printf("| %-14s| %-5d| %-65s|  %-8s|\n",
								publication_list[i].publication_category,
								publication_list[i].publication_id,
								publication_list[i].publication_description,
								publication_list[i].publication_status);
						printf("------------------------------------------------------------------------------------------------------\n");
						retorno = 0;
					}
				}
			}
		}
	}
	return retorno;
}

/**
 * \brief publication_printById: print the publication associated to the id given
 * \param Publication* client_list: Pointer to array of publications
 * \param int client_len: Publication Array length
 * \param int id: Value to search and print associated info
 * \return (-1) Error / (0) Ok*
 */

int publication_printById(Publication* publication_list, int publication_len,int Id)
{
	int retorno = -1;
	int clientId;
	if (publication_list != NULL && publication_len > 0 && Id > 0)
	{
		if(publication_findById(publication_list, publication_len, Id, &clientId) != 0)
		{
			printf("\nERROR, ID DE PUBLICACION INEXISTENTE.\n");
		}
		else
		{
			if(publication_list != NULL && publication_len > 0)
			{
				for(int i=0;i< publication_len ;i++)
				{
					if(publication_list[i].publication_isEmpty == FALSE && publication_list[i].publication_id == Id)
					{
						printf("----------------------------------------------------------------------------------------------------------------\n");
						printf("| PUBLICACION ID : %-4d                                                                                        |\n",Id);
						printf("----------------------------------------------------------------------------------------------------------------\n");
						printf("|   CATEGORIA   | DESCRIPCION                                                            | ESTADO | ID CLIENTE |\n");
						printf("----------------------------------------------------------------------------------------------------------------\n");
						printf("| %-14s| %-71s| %-8s| %-10d|\n",
								publication_list[i].publication_category,
								publication_list[i].publication_description,
								publication_list[i].publication_status,
								publication_list[i].publication_idClient);
						printf("----------------------------------------------------------------------------------------------------------------\n");
						retorno = 0;
					}
				}

			}
		}
	}
	return retorno;
}

/**
 * \brief publication_countPaused: counts the number of paused publications
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int publication_firstLoad: Pointer to space in memory where is the variable to indicate if publications array is empty
 */

int publication_countPaused(Publication* publication_list, int publication_len, int publication_firstLoad)
{
	int retorno = -1;
	int count = 0;

	if (publication_list != NULL && publication_len > 0)
	{
		if(publication_firstLoad == FALSE)
		{
			printf("\nNO HAY PUBLICIDADES CARGADAS.\n");
		}
		else
		{
			for(int i=0;i< publication_len ;i++)
			{
				if(publication_list[i].publication_isEmpty == FALSE && strcmp(publication_list[i].publication_status,PAUSED)==0)
				{
					count++;
				}
			}
		}
		printf("\nEL NUMERO DE PUBLICIDADES PAUSADAS ES: %d\n",count);
		retorno = 0;
	}
	return retorno;
}

/**
 * \brief publication_countCategory: counts the number of publications of each category
 * \param Publication* publication_list: Pointer to array of publications
 * \param int publication_len: Publication Array length
 * \param int publication_firstLoad: Pointer to space in memory where is the variable to indicate if publications array is empty
 */

int publication_countCategory(Publication* publication_list, int publication_len, int publication_firstLoad)
{
	int retorno = -1;
	int countInmobiliario = 0;
	int countAutomotor = 0;
	int countEmpleos = 0;
	int countCompraVenta = 0;

	if (publication_list != NULL && publication_len > 0)
	{
		if(publication_firstLoad == FALSE)
		{
			printf("\nNO HAY PUBLICIDADES CARGADAS.\n");
		}
		else
		{
			for(int i=0;i< publication_len ;i++)
			{
				if(publication_list[i].publication_isEmpty==FALSE)
				{
					if(strcmp(publication_list[i].publication_category,"INMOBILIARIOS")==0)
					{
						countInmobiliario++;
					}
					else if(strcmp(publication_list[i].publication_category,"AUTOMOTOR")==0)
					{
						countAutomotor++;
					}
					else if(strcmp(publication_list[i].publication_category,"EMPLEOS")==0)
					{
						countEmpleos++;
					}
					else if(strcmp(publication_list[i].publication_category,"COMPRA/VENTA")==0)
					{
						countCompraVenta++;
					}
				}
			}
			publication_countMaxCategory(countInmobiliario, countAutomotor, countEmpleos, countCompraVenta);
			retorno = 0;
		}
	}
	return retorno;
}

/**
 * \brief publication_countMaxCategory: returns the value and amount of catehory with most publications
 * \param int countInmobiliario: amount of publications of said category
 * \param int countAutomotor: amount of publications of said category
 * \param int countEmpleos: amount of publications of said category
 * \param int countCompraVenta: amount of publications of said category
 */

#define QTY_CATEGORIES 4
#define LEN_CATEGORY 20

typedef struct
{
	char aux_category[LEN_CATEGORY];
	int aux_categoryNumber;
}CategoryAuxilar;

static int publication_countMaxCategory(int countInmobiliario,int countAutomotor,int countEmpleos,int countCompraVenta)
{
	int retorno = -1;
	int max;
	char aux_category[QTY_CATEGORIES][LEN_CATEGORY] = {"INMOBILIARIO","AUTOMOTOR","EMPLEOS","COMPRA/VENTA"};
	int aux_categoryNumber[QTY_CATEGORIES] = {countInmobiliario,countAutomotor,countEmpleos,countCompraVenta};

	CategoryAuxilar arrayAux[QTY_CATEGORIES];

	for(int i = 0; i < QTY_CATEGORIES; i++)
	{
		strncpy(arrayAux[i].aux_category,aux_category[i],LEN_CATEGORY);
		arrayAux[i].aux_categoryNumber=aux_categoryNumber[i];
		if(i == 0)
		{
			max = i;
		}
		else if(arrayAux[i].aux_categoryNumber >= max)
		{
			max = arrayAux[i].aux_categoryNumber;
		}
	}
	printf("-------------------------------------------\n");
	printf("| LISTADO DE RUBROS CON MAS PUBLICACIONES |\n");
	printf("-------------------------------------------\n");
	printf("|  CATEGORIA  | CANTIDAD                  |\n");
	printf("-------------------------------------------\n");
	for(int i=0;i< QTY_CATEGORIES ;i++)
	{
		if(arrayAux[i].aux_categoryNumber==max)
		{
			printf("| %-12s| %-26d|\n",
					arrayAux[i].aux_category,
					arrayAux[i].aux_categoryNumber);
			printf("-------------------------------------------\n");
		}
	}
	return retorno;
}
